#!/usr/bin/env ruby

project_root = ENV['GAME_ROOT']
avian_root = ENV['AVIAN_ROOT']

build = ""
fastlane = ""
case ENV['AVIAN_BUILD']
when "run_simulator"
  build = ""
when "run_device"
  build = "device"
  fastlane = "development"
when "build_device"
  build = "clean archive:distribution"
  fastlane = "appstore"
else
  raise "Invalid AVIAN_BUILD"
end

require 'process_output_wrapper'
include ProcessOutputWrapper::DSL

Bundler.with_clean_env do
  build_dir = File.join("/", "tmp", "avian", "build")
  platform_support = File.join(project_root, "platform_support", "ios")

  gemfile = File.join(platform_support, "Gemfile")
  system("BUNDLE_GEMFILE=#{gemfile} bundle check >/dev/null 2>/dev/null") ||
    system("bundle install --gemfile=#{gemfile}") || begin
      STDERR.puts "Bundling #{gemfile} failed"
      exit 1
  end

  FileUtils.mkdir_p(build_dir)
  FileUtils.mkdir_p(File.join(build_dir, "app", "_avian"))
  FileUtils.mkdir_p(File.join(build_dir, "app", "_game"))

  # Copy files from the actual game project into tmp/build/app/_game
  ["app", "config", "lib"].each do |game_files|
    FileUtils.cp_r(project_root + "/" + game_files + "/.", "#{build_dir}/app/_game/#{game_files}/")
  end

  # FileUtils.cd(build_dir) # TODO: cd to fastlane
  # if fastlane != ""
  #   system("bundle exec fastlane match #{fastlane}")
  # end

  # Copy the resources from the game project into tmp/build/resources/
  FileUtils.cp_r(project_root + "/resources" + "/.", "#{build_dir}/resources/")
  # Copy the platform specific resources into tmp/build/resources/
  FileUtils.cp_r(platform_support.to_s + "/resources" + "/.", "#{build_dir}/resources/")

  # Copy support files to tmp/build/
  FileUtils.cp_r(File.join(platform_support, "Gemfile"), build_dir)
  FileUtils.cp_r(File.join(platform_support, "Gemfile.lock"), build_dir)
  FileUtils.cp_r(File.join(platform_support, "Rakefile"), build_dir)

  # Copy ios specific avian files to tmp/build/app/_avian/ios
  avian_files = File.join(avian_root, "lib", "avian", "platforms", "ios-rubymotion", "ios")
  FileUtils.cp_r(avian_files.to_s + "/.", "#{build_dir}/app/_avian/ios/")

  # Copy avian engine files to tmp/build/app/_avian/engine
  engine_files = File.join(avian_root, "lib", "avian", "engine")
  FileUtils.cp_r(engine_files.to_s + "/.", "#{build_dir}/app/_avian/engine/")

  # Set the current working directory to the build
  FileUtils.cd(build_dir)

  if system("bundle show motion-cocoapods >/dev/null 2>&1")
    result = run_this "BUNDLE_GEMFILE=#{gemfile} bundle exec rake pod:install" do
      to_hide = [
        '[!] If you need to update CocoaPods repository to install newer libraries, please run "pod repo update" command before.',
        'Analyzing dependencies',
        'Downloading dependencies',
        'Generating Pods project',
        'Skipping User Project Integration',
        'Pod installation complete!'
      ]
      whenever { to_hide.all? { |start| !line.start_with?(start) } }
        .do { puts line }
    end

    exit(result) if result != 0
  end





  printed_warnings = []
  printing_progress = false
  ignore_lines = 0

  def line_is_progress?(line)
    progress_prefixes = [
      "   Compile",
      "      Link",
      "      Copy",
      "     Build",
      "    Create",
      "  Codesign",
      "    Deploy",
      "  Simulate"
    ]
    progress_prefixes.any? { |prefix| line.start_with?(prefix) }
  end

  def line_is_warning?(line)
    warning_prefixes = [
      "  WARNING!"
    ]
    warning_prefixes.any? { |prefix| line.start_with?(prefix) }
  end

  run_this "BUNDLE_GEMFILE=#{gemfile} bundle exec rake #{build} device_name=\"iPhone 11 Pro\"" do
    whenever { line_is_progress?(line) }
      .do {
        print("\e[32m.\e[0m")
        printing_progress = true
      }

    whenever { line_is_warning?(line) }
      .do {
        if line.include?("DEBUG: Added to environment:")
          ignore_lines = 3
        end

        if ignore_lines > 0
          ignore_lines = ignore_lines - 1
        else
          unless printed_warnings.include?(line)
            printed_warnings << line
            if printing_progress
              printing_progress = false
              print "\n\r"
            end
            puts("\e[33m#{line.strip}\e[0m")
          end
        end
      }

    whenever { !line_is_warning?(line) && !line_is_progress?(line) }
      .do {
        if line.include?("Looking for Simulator.app in (")
          ignore_lines = 3
        end

        if ignore_lines > 0
          ignore_lines = ignore_lines - 1
          if ignore_lines == 0
            print_normally!
            if printing_progress
              printing_progress = false
              print "\n\r"
            end
          end
        else
          if printing_progress
            printing_progress = false
            print "\n\r"
          end
          puts(line) && print_normally!
        end
      }

    whenever { line.include?("libswiftCore.dylib") && line.include?("image not found") }
      .do {
        puts """
An error has occured. Run the following and try again:
```
sudo cp -r /usr/lib/swift/*.dylib /Applications/Xcode.app/Contents/Frameworks
sudo touch /Applications/Xcode.app/Contents/Frameworks/.swift-5-staged
```
        """
        exit 1
      }

    whenever { line.include?("XPC connection interrupted") }
      .do { exit 1 }
  end
end
