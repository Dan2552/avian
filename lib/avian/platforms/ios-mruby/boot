#!/usr/bin/env ruby

project_root = ENV['GAME_ROOT']
avian_root = ENV['AVIAN_ROOT']
build_dir = File.join("/", "tmp", "avian", "build")
platform_support = File.join(project_root, "platform_support", "mruby")
script_dir = __dir__
xcode_project_dir = File.join(build_dir, "ios", "xcode_project")

shared_boot =
  File.join(avian_root, "lib", "avian", "platforms", "shared-mruby", "shared_boot.rb")

load(shared_boot)

if ENV['RUBY_ONLY'].length > 0
  FileUtils.cp(File.join(build_dir, "app.c"), File.join(xcode_project_dir, "app.h"))
  exit(0)
end

unless File.directory?(File.join(build_dir, "ios", "sdl"))
  FileUtils.mkdir_p(File.join(build_dir, "ios"))
  FileUtils.cd(File.join(build_dir, "ios"))
  puts "\n--- Cloning SDL ---"
  system("git clone https://github.com/SDL-mirror/SDL.git sdl") ||
    raise("Failed to clone SDL")
end

unless File.directory?(File.join(build_dir, "ios", "sdl_image"))
  FileUtils.mkdir_p(File.join(build_dir, "ios"))
  FileUtils.cd(File.join(build_dir, "ios"))
  puts "\n--- Cloning SDL_image ---"
  system("git clone https://github.com/SDL-mirror/SDL_image.git sdl_image") ||
    raise("Failed to clone SDL_image")
end

FileUtils.cd(build_dir)

FileUtils.rm_rf(xcode_project_dir)
source = File.join(build_dir, "ios", "sdl", "Xcode-iOS", "Template", "SDL iOS Application")
FileUtils.cp_r(source, xcode_project_dir)

puts "\n--- Preparing Xcode project ---"
system(
  { "BUNDLE_GEMFILE" => "", "XCODE_PROJECT_ROOT" => xcode_project_dir },
  File.join(script_dir, "setup_xcode_project.rb")
) || raise("Failed to setup Xcode project")

mruby_path = `bundle exec mundle path`.chomp

FileUtils.rm_rf(File.join(build_dir, "frameworks"))
FileUtils.mkdir_p(File.join(xcode_project_dir, "MRuby.framework", "Headers"))

ios_lib = File.join(mruby_path, "build", "ios", "lib", "libmruby.a")
ios_simulator_lib = File.join(mruby_path, "build", "ios-simulator", "lib", "libmruby.a")

lipo = %W(
  lipo
    #{ios_lib}
    #{ios_simulator_lib}
    -create
    -output #{File.join(xcode_project_dir, "MRuby.framework", "MRuby")}
)
system(*lipo) || raise("Failed creating mruby universal iOS framework")

FileUtils.cp_r(File.join(mruby_path, "include", "."), File.join(xcode_project_dir, "MRuby.framework", "Headers"))
FileUtils.cp(File.join(script_dir, "framework", "Info.plist"), File.join(xcode_project_dir, "MRuby.framework"))


FileUtils.cp(File.join(build_dir, "app.c"), File.join(xcode_project_dir, "app.h"))
FileUtils.rm(File.join(xcode_project_dir, "main.c"))
FileUtils.cp(File.join(script_dir, "main.c"), File.join(xcode_project_dir, "main.c"))

# rm $script_dir/output/project/main.c
# cat output/app.c c_bridge/suffix.c > $script_dir/output/project/main.c

puts 'run the following to open the xcodeproj:'
puts "\`\`\`"
puts "open #{xcode_project_dir}/___PROJECTNAME___.xcodeproj/"
puts "\`\`\`"

