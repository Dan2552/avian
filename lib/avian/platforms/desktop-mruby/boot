#!/usr/bin/env ruby

def verbose?
  (ENV['VERBOSE'] || "").length > 0
end

def log(str)
  puts(str) if verbose?
end

def error(str)
  STDERR.puts str
  exit 1
end

project_root = ENV['GAME_ROOT']
avian_root = ENV['AVIAN_ROOT']
build_dir = File.join(ENV["HOME"], ".avian", "build")
platform_support = File.join(project_root, "platform_support", "mruby")
script_dir = __dir__
shared_dir = File.join(avian_root, "lib", "avian", "platforms", "shared-mruby")

shared_boot =
  File.join(avian_root, "lib", "avian", "platforms", "shared-mruby", "shared_boot.rb")

load(shared_boot)

FileUtils.mkdir_p(File.join(build_dir, "documents"))

FileUtils.mkdir_p(File.join(build_dir, "desktop"))
sdl_install = File.join(build_dir, "desktop", "install")
FileUtils.mkdir_p(sdl_install)

unless File.directory?(File.join(build_dir, "desktop", "sdl"))
  FileUtils.cd(File.join(build_dir, "desktop"))
  log "\n--- Cloning SDL ---"
  system("git clone https://github.com/SDL-mirror/SDL.git sdl") ||
    error("Failed to clone SDL")

  log "\n--- Compiling SDL ---"
  FileUtils.cd(File.join(build_dir, "desktop", "sdl"))
  system("./configure --prefix=#{sdl_install} && make -j4 && make install") || begin
    FileUtils.remove_dir(File.join(build_dir, "desktop", "sdl"))
    error("Failed to compile SDL")
  end
end

unless File.directory?(File.join(build_dir, "desktop", "sdl_image"))
  FileUtils.cd(File.join(build_dir, "desktop"))
  log "\n--- Cloning SDL image ---"
  system("git clone https://github.com/SDL-mirror/SDL_image.git sdl_image") ||
    error("Failed to clone SDL")

  log "\n--- Compiling SDL image ---"
  FileUtils.cd(File.join(build_dir, "desktop", "sdl_image"))
  system("./autogen.sh && ./configure --prefix=#{sdl_install} && make -j4 && make install") || begin
    FileUtils.remove_dir(File.join(build_dir, "desktop", "sdl_image"))
    error("Failed to compile SDL image")
  end
end

unless File.directory?(File.join(build_dir, "desktop", "sdl_ttf"))
  FileUtils.cd(File.join(build_dir, "desktop"))
  log "\n--- Cloning SDL ttf ---"
  system("git clone https://github.com/SDL-mirror/SDL_ttf.git sdl_ttf") ||
    error("Failed to clone SDL")

  log "\n--- Compiling SDL ttf ---"
  FileUtils.cd(File.join(build_dir, "desktop", "sdl_ttf"))
  system("./autogen.sh && ./configure --prefix=#{sdl_install} && make -j4 && make install") || begin
    FileUtils.remove_dir(File.join(build_dir, "desktop", "sdl_ttf"))
    error("Failed to compile SDL ttf")
  end
end

log "\n--- Preparing c files ---"
FileUtils.cp(File.join(build_dir, "app.c"), File.join(build_dir, "app.h"))
FileUtils.cp(File.join(shared_dir, "main.c"), File.join(build_dir, "main.c"))
FileUtils.cp(File.join(script_dir, "options.h"), File.join(build_dir, "options.h"))
FileUtils.cp(File.join(script_dir, "path.h"), File.join(build_dir, "path.h"))
FileUtils.cp(File.join(script_dir, "path.c"), File.join(build_dir, "path.c"))

FileUtils.cd(platform_support)
mruby_path = `bundle exec mundle path`.chomp
FileUtils.cd(build_dir)

log "\n--- Compiling c files ---"
ENV["LD_LIBRARY_PATH"] = "#{ENV["HOME"]}/.avian/build/desktop/install/lib"
clang = %W(
  clang
    main.c path.c
    -ooutput
    -I#{mruby_path}/include
    -lmruby
    -L#{mruby_path}/build/host/lib/
    -I#{sdl_install}/include/SDL2
    -L#{sdl_install}/lib
    -lSDL2
    -lSDL2_image
    -lSDL2_ttf
    -lm
)

system(*clang) || error("Compiling failed")
log "Compiling complete."

system(*%W(chmod +x ./output))
begin
  system("./output")
rescue Interrupt
end
