#!/usr/bin/env ruby

project_root = ENV['GAME_ROOT']
avian_root = ENV['AVIAN_ROOT']
build_dir = File.join(project_root, "tmp", "build")
platform_support = File.join(project_root, "platform_support", "ios")

FileUtils.mkdir_p(build_dir)
FileUtils.mkdir_p(File.join(build_dir, "app", "_avian"))
FileUtils.mkdir_p(File.join(build_dir, "app", "_game"))

# Copy files from the actual game project into tmp/build/app/_game
["app", "config", "lib"].each do |game_files|
  FileUtils.cp_r(project_root + "/" + game_files + "/.", "#{build_dir}/app/_game/#{game_files}/")
end

# Copy the resources from the game project into tmp/build/resources/
FileUtils.cp_r(project_root + "/resources" + "/.", "#{build_dir}/resources/")
# Copy the platform specific resources into tmp/build/resources/
FileUtils.cp_r(platform_support.to_s + "/resources" + "/.", "#{build_dir}/resources/")

# Copy support files to tmp/build/
FileUtils.cp_r(File.join(platform_support, "Gemfile"), build_dir)
FileUtils.cp_r(File.join(platform_support, "Gemfile.lock"), build_dir)
FileUtils.cp_r(File.join(platform_support, "Rakefile"), build_dir)

# Copy ios specific avian files to tmp/build/app/_avian/ios
avian_files = File.join(avian_root, "lib", "avian", "platforms", "ios-rubymotion", "ios")
FileUtils.cp_r(avian_files.to_s + "/.", "#{build_dir}/app/_avian/ios/")

# Copy avian engine files to tmp/build/app/_avian/engine
engine_files = File.join(avian_root, "lib", "avian", "engine")
FileUtils.cp_r(engine_files.to_s + "/.", "#{build_dir}/app/_avian/engine/")

# Set the current working directory to the build
FileUtils.cd(build_dir)

# ruby_files = Dir.glob(File.join(build_dir, "**", "*.rb"))
# system("cat #{ruby_files.join(" ")} >#{build_dir.to_s}/_concatination.rb")
require_relative 'prefix/constantize'
require 'avian'

app_load_order = [
  'lib/**/*.rb',
  'app/values/**/*.rb',
  'app/**/concerns/*.rb',
  'app/**/*.rb',
  'config/**/*.rb'
]

avian_files = AVIAN_LOAD_ORDER.map { |glob| Dir.glob(File.join(build_dir, "app", "_avian", glob)) }.flatten
app_files = app_load_order.map { |glob| Dir.glob(File.join(build_dir, "app", "_game", glob)) }.flatten
ruby2d_prefix = Dir.glob(File.expand_path(File.join(__dir__, "prefix", "*.rb")))
ruby2d_suffix = Dir.glob(File.expand_path(File.join(__dir__, "suffix", "*.rb")))

all_files =
  ruby2d_prefix +
  avian_files +
  app_files +
  ruby2d_suffix

ruby2d_path = File.join(build_dir, "ruby2d")
FileUtils.mkdir_p(ruby2d_path)
# require 'pry'
# binding.pry

File.open("#{build_dir.to_s}/ruby2d/app.rb", 'w') do |write_file|
  all_files.each do |filepath|
    write_file.puts File.readlines(filepath).reject { |s| s.strip.empty? }.join
    # File.open(filepath, 'r') do |read_file|

    #   write_file.puts "\n# #{filepath}\n"
    #   write_file.puts read_file.read.gsub(/^[\s]*$\n/, "").strip
    # end
  end
end

# system("cat #{all_files.join(" ")} >)

FileUtils.cd(ruby2d_path)

system("killall Xcode")
sleep 2
system("ruby2d build --ios ./app.rb --debug")
system("open /Users/dan2552/Dropbox/Midnight/tmp/build/ruby2d/build/ios/MyApp.xcodeproj")

# require 'pry'
# binding.pry

